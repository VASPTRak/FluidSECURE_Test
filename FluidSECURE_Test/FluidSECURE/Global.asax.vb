Imports System.Web.Optimization

Public Class Global_asax
    Inherits HttpApplication

    Sub Application_Start(sender As Object, e As EventArgs)
        Try

            ' Fires when the application is started
            RouteConfig.RegisterRoutes(RouteTable.Routes)
            BundleConfig.RegisterBundles(BundleTable.Bundles)
            RoleActions.AddUserRoles() 'Add roles in to database.
            If (ConfigurationManager.AppSettings("AllowActivityLogin").ToString().ToLower() = "yes") Then
                CSCommonHelper.WriteLog("Application Start", "", "", "", "", "", "success", "")
            End If
		Catch
		End Try
    End Sub


    Sub Session_End(sender As Object, e As EventArgs)
        Try

            If (ConfigurationManager.AppSettings("AllowActivityLogin").ToString().ToLower() = "yes") Then
                CSCommonHelper.WriteLog("log Off", "login", "", "", Session("PersonName").ToString() & "(" & Session("PersonEmail").ToString() & ")", Session("IPAddress").ToString(), "success", "")
            End If

        Catch
        End Try

    End Sub

    Sub Application_End(sender As Object, e As EventArgs)
        Try

            If (ConfigurationManager.AppSettings("AllowActivityLogin").ToString().ToLower() = "yes") Then
                CSCommonHelper.WriteLog("Application Shutdown", "", "", "", "", "", "success", "")
            End If

        Catch 
        End Try

    End Sub

	Sub Application_Error(ByVal sender As Object, ByVal e As EventArgs)
        Try

            ' Code that runs when an unhandled error occurs

            ' Get the exception object.
            Dim exc As Exception = Server.GetLastError

            ' Handle HTTP errors (avoid trapping HttpUnhandledException
            ' which is generated when a non-HTTP exception 
            ' such as the ones generated by buttons 1-3 in 
            ' Default.aspx is not handled at the page level).
            If (exc.GetType Is GetType(HttpException)) Then
                ' The Complete Error Handling Example generates
                ' some errors using URLs with "NoCatch" in them;
                ' ignore these here to simulate what would happen
                ' if a global.asax handler were not implemented.
                If exc.Message.Contains("NoCatch") Or exc.Message.Contains("maxUrlLength") Then
                    Return
                End If

                'Redirect HTTP errors to HttpError page
                'Server.Transfer("HttpErrorPage.aspx")
            End If
            Dim log As log4net.ILog = log4net.LogManager.GetLogger(GetType(Global_asax))
            log4net.Config.XmlConfigurator.Configure()
            log.Error("Unhandled exception occured. Exception is : " & IIf(exc.InnerException Is Nothing, exc.Message.ToString(), exc.InnerException))
            ' For other kinds of errors give the user some information
            ' but stay on the default page
            'Response.Write("<h2>Global Page Error</h2>" & vbLf)
            'Response.Write("<p>" & exc.Message + "</p>" & vbLf)
            'Response.Write(("Return to the <a href='Default.aspx'>" _
            '  & "Default Page</a>" & vbLf))

            '' Log the exception and notify system operators
            'ExceptionUtility.LogException(exc, "DefaultPage")
            'ExceptionUtility.NotifySystemOps(exc)
            'Response.Redirect("~/ErrorPages/Error.aspx")
            ' Clear the error from the server
            'Server.ClearError()
        Catch ex As Exception
            Dim log As log4net.ILog = log4net.LogManager.GetLogger(GetType(Global_asax))
            log4net.Config.XmlConfigurator.Configure()
            log.Error("Exception occured in  Application_Error. Exception is : " & ex.Message)
        End Try
    End Sub
End Class